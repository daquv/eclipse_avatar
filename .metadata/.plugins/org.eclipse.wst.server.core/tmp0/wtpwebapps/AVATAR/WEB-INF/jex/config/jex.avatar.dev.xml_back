<?xml version="1.0" encoding="UTF-8"?>
<jex charset="UTF-8">
    <web checkInput="true">
         <session>
            <inActiveInterval>3600</inActiveInterval>
            <!--<errorPage>/error/sessionError.jsp</errorPage>-->
        </session>
        
		<execute>
            <filter-mapping  pattern="/**/*.act">
                <filter-chains>webInit,webAction,webResultHTML</filter-chains>
                <!-- <filter-chains >webInit,webSecurity,webAction,webResultHTML</filter-chains> -->
                <dispatcher>Action 서비스</dispatcher>
            </filter-mapping>
            
            <filter-mapping  pattern="/**/*.jct">
                <!-- code -->
                <filter-chains pattern="/**/_code.jct">webCode</filter-chains>
                <filter-chains pattern="/**/*.jct">webInit,webAction,webResultJSON</filter-chains>
                <!-- <filter-chains pattern="/**/*.jct">webInit,webSecurity,webAction,webResultJSON</filter-chains> -->
                <dispatcher>JSON 서비스</dispatcher>
            </filter-mapping>
        </execute>
		
        <action_prefix>WEB-INF/action/jex/avatar/</action_prefix>
        <action_suffix>_act.jsp</action_suffix>
        <view_prefix>view/jex/avatar/</view_prefix>
        <view_suffix>_view.jsp</view_suffix>
        
        <filter-chains>
            <default>
                <!-- filter>file_upload</filter>
                 XecureWEB 암호화 사용시
                <filter>xecureweb</filter>
                -->
            </default>
        </filter-chains>
        
        <filters>
            <file_upload tmppath="/tmp" encoding="UTF-8">jex.web.filter.impl.MultipartFilter</file_upload>
                <!-- XecureWEB암호화 사용시
                    <sessioni_filter no_check_svc="lgn_0001_01" sessionErrorpage="err_0001_01" >jex.testprj.filter.TESTPRJSessionFilter</sessioni_filter>
                     <xecureweb>jex.pt.filter.xecure.XecureFilter</xecureweb>
                 -->
				 <webInit>jex.web.sys.filter.impl.execute.WebServiceInit</webInit>
            <webAction>jex.web.sys.filter.impl.execute.WebServiceAction</webAction>
            
            <webResultJSON>jex.web.sys.filter.impl.execute.WebServiceResultToJSON</webResultJSON>
            <webResultHTML>jex.web.sys.filter.impl.execute.WebServiceResultToHTML</webResultHTML>
            <webCode>jex.web.sys.filter.impl.execute.WebServiceCode</webCode>
        </filters>
        <!-- 
          오류에 대한 처리 페이지를 설정 합니다.
          
          Exception 종류별 처리 페이지를 설정할수 있으며 설정된 페이지가 없을경우 default 페이지로 이동 됩니다.
          
          ex)
          <error-page>
            <default>/default_errorpage.jsp</default>
            <java.sql.SQLException>/SQL_Errorpage.jsp</java.sql.SQLException>
            <java.net.SocketException>/SOCKET_Errorpage.jsp</java.net.SocketException>
          </error-page>
        -->
        <error-page>
          <!--<default>/WEB-INF/jsp/com/view/error_view.jsp</default>-->
          <default>/view/jex/avatar/comm/error.jsp</default>
        </error-page>
    </web>
    
    <!--
        내부 브릿지 ClassManager 를 설정한다.
        기존처럼
        <classManager class="com.TEST" /> 
        선언해도 사용가능
     -->
    <classManager class="jex.web.WebClassManager"/>
    <!-- 
        <businessDateUtil></businessDateUtil>
        <systemLogger></systemLogger>
        <errorManager></errorManager>
        <dataLoader></dataLoader>
        <commonUtil></commonUtil>
        <codeManager></codeManager>
        <resourceManager></resourceManager>
    </classManager>
    -->    
   
    <!-- Project별 setting uri+/PJRID/PJR_SETTING -->
    
    <codes path="${JEX_HOME}/xml/code" />
    <resource>
        <net>
            <socket>
                <!--default path="${JEX_HOME}/xml/JEXSTUDIO/xml/echo">
                    <class>jex.resource.net.socket.echo.JexEchoSocketFactory</class>
                    <host>0:0</host>
                </default-->
            </socket>
            <http/>
        </net>
        <database>
            <jdbc>
                <!--
                    DataBae 연결 타입
                    0 : JDBC 직접 연결 (db pool 이 없는 단순 형태) url, user, password, dirver 가 선언 되어야함
                    1 : Lookup 을 통한 연결 
                -->
                <!-- 
               <default type="0" >
                    <dirver>org.apache.derby.jdbc.ClientDriver</dirver>
                    <url>jdbc:derby://ip:port/SID</url>
                    <user>id</user>
                    <password>pw</password>
               </default>
               -->
               <default type="1" source="java:comp/env/jdbc/avatarDs" />
               
            </jdbc>
        </database>
        <spec>
            <!--
                Framework 내부 업무에서 사용하는 Resouce 정보를 정의 합니다.
                 
                single : 싱글 인스턴스로 관리할지 (true/false)
                type : resource 의 타입 (file, net, stream 등)
                transaction : batch(배치 업무형), close (트랜젝션 불가, 단위 close 실행, keep (트랜젝션 가능, Task 업무 전체별 관리)
                              parent(상위 정책 에 따른 관리)
                manager : 리소스를 어디서 관리 할것인지 (root : Task 별 관리, sub : BCS 별 관리
                resource : 리소스 내부의 리소스 절대 경로 (resouce 내부에서 선언된 정보만 사용할수 있습니다.
                
                parameters 하위 테그는 key=value 속성으로 Map 에 담겨 해당 구현 Class 로 넘어 갑니다.
                
                <id attribute...>
                    <parameters>
                        <attbute_id>attbute_value</attbute_id>
                    </parameters>
                </id>   
                
            -->
            <BIZ_DB single="true" type="database" resource="jdbc/default" />
        </spec>
    </resource>
    <sequence>
        <!--<TEMP_SEQ type="file" resource="${JEX_HOME}/seq/seq_blbd_blthg_no.prop" length="10" />-->
    </sequence>
    <!--
     Log Level (OFF, FATAL(high level), ERROR, WARN , INFO, DEBUG (log level))
     -DiTMS_NAMESPACE 에 지정된 이름에서 .을 /로 치환한 값이 dir과 subDir사이에 폴더명으로 들어간다.
     로그 폴더 : dir + System.getProperty("iTMS_NAMESPACE") + subDir
     
     * 기본으로 FILE, CONSOLE appender 는 선언이 되어 있으며 타 appender 가 필요시 선언하여 사용 하면 됩니다.
     *
     * log PatternLayout 다음과 같습니다.(전체 소문자 입니다.)
     *
     * %p  debug, info, warn, error, fatal 등의 priority 가 출력된다.  
     * %d  로깅 이벤트가 발생한 시간을 기록합니다.
     *  포맷은 %d{hh24:mi:ss ms}, %d{yyyy mm dd hh24:mm:ss, ms} 와 같은 Oracle date format 을 사용한다.
     * %t  로그이벤트가 발생된 쓰레드의 이름을 출력합니다.  
     * %%  % 표시를 출력하기 위해 사용한다.  
     * %n  플랫폼 종속적인 개행문자가 출력된다. \r\n 또는 \n 일것이다.  
     * %c  패키지를 표시합니다
     *  예) 카테고리가 a.b.c 처럼 되어있다면 %c{2}는 b.c가 출력됩니다.
      * %C  클래스명을 포시합니다.
     *  예)클래스구조가 org.apache.xyz.SomeClass 처럼 되어있다면 %C{1}는 SomeClass 가 출력됩니다
     * %f  로깅이 발생한 프로그램 파일명을 나타냅니다.
     * %l  로깅이 발생한 caller의 정보를 나타냅니다
     * %m  로깅이 발생한 method 이름을 나타냅니다.
     * %r  어플리케이션 시작 이후 부터 로깅이 발생한 시점의 시간(milliseconds)
     * %x  로깅이 발생한 thread와 관련된 NDC(nested diagnostic context)를 출력합니다.
     * %g  사용자가 요청한 메시지를 출력 합니다
     *
     * "-" 문자를 사용하여 Left 정렬을 할 수 있다 지정되지 않은 경우에는 우측 정렬이 된다.
     *
     * %[-][a].[b]와 같이 문자열을 지정하면 출력되는 문자의 포맷을 컨트롤 할 수 있다.
     * "-"  : 우측/좌측 정렬 여부. "-'을 붙이면 좌측 정렬이 되고, 아니면 기본으로 우측 정렬이 됨. (
     * [a] 값이 정의되어야 사용이 가능하며 기록할 문자열이 "10" 자인 경우 "%20C" 와 같이 설정을 하면 %C에 의한 문자열이 20자 이하인 경우에는 문자열을 우측으로 정렬을 하고 20자를 생성해준다. "%-20C"이면 좌측으로 정렬되고 20 byte의 문자열이 만들어진다. 빈 공간은 공백으로 처리된다.
     * [a] : 로그 문자열이 지정된 a 값 보다 작은 경우에 Padding을 맞추어 준다. 즉 a=10인 경우 기록될 문자열이 5자이면 공백으로 5자가 만들어진다.
     * [b] : 로그 문자열이 지정된 b 값 보다 작은 경우에는 상관 없지만 큰 경우에는 지정된 b 값만큰만 문자열을 커팅 한다. 단 커팅의 기준은 우측기준이 된다. 즉 "12345"이고 b=3인 경우에는 "345" 문자열이 기록된다.
     *       
     * default 는 꼭 선언 되어야 합니다. 선언되지 않을경우 OFF 로 기본 설정 됩니다.
     *
     * handler 에 선언 되어야 하는 속성은 로그 목록에 중복 선언 될수 있으며 로그 목록에 선언된 값의 우선 순위가 더 높습니다.
    -->
    <logs>
        <handlers>
            <!--
            
                기본 FileLog 생성용 Handler (sync) 
                logSize : 생성되는 로그 파일의 최대 크기 (단위 M), 0 혹은 지정하지 않으면 제한이 없습니다.
                logCount: 로그 파일의 크기를 나눌때 최대 파일수 그 이상의 파일은 삭제 됩니다.
                filePath: 파일을 생성할 경로
                fileName: 생성할 로그 파일명 을 설정합니다. 
                            파일명 중 '/' 가 있을경우 최종 '/' 이전에 값은 폴더로 생성 합니다.
                dateFormat : 파일명 뒤에 일자를 붙일경우 그 일자 format
            -->
            <file class="jex.log.handler.file.SyncFileHandler" />
            <ASyncfile class="jex.log.handler.ASyncFileHandler" />
            <console class="jex.log.handler.SystemOutHandler" />
            <ASyncDB class="jex.log.handler.db.ASyncDBHandler" />
        </handlers>
        <rule>
          <default level="${JEX.log.rule.default.level}" filePath="${JEX_HOME}/logs" fileName="default." dateFormat="yyyymmdd">
              <handler>console</handler>
              <pattern>[%d{yyyy-mm-dd hh24:mi:ss:ms}][%-5p] : %g%n</pattern>
          </default>
        </rule>
    </logs>
</jex>
